一个schemer的旅行笔记

k在前往「Republic Of Haskell」旅行的第二天上午就被机械执法者逮了，罪名包括公然IO不戴套[0]，以及教唆无知群众利用编译ghc的热量做爆米花[spec]。前面一项本来不是大事，加模块就行(unsafePerformIO)。后面一项则在事实上导致了事态的恶化，最终使得k与那些前来保护工作站的守卫大打出手--往主板上浇糖浆黄油确实挺过分的。

也是现在，下午，k垂头丧气走向Kleisli[1]公园的原因。

“又没有呼吁大伙都去用ListT[2]，不会monad transformer不是Haskell人？这就要我打白工？真是好坚强的心灵啊…”K一边抱怨，一边走向公园中位于小山丘旁，唯一的一口水井。

刚到Haskell共和国，看到公园中错落有致的高大饮水机[H2O Rationator]时，K是有一些羡慕的，这就是当代函数式阵营最繁荣的工业语言的底气吗？i了i了。但是在了解到这玩意其实只是个放在水龙头后边的大号音箱之后……看一次笑一次啊。现在又了解到居然要靠人力挑水到小山丘顶上的水塔为它们供水，更想……笑不出来了，太累。

趁着没有执法者在看他，k摸出几张便利贴，给那些饮水机挨个贴了一张，刚好把顶上的眼形符号遮住.

虽然是Haskeller编的Scheme笑话，但是编的真挺好。

-----------------------------
Scheme 大法好
天灭oop 退C保平安
人在做 天在看 赋值语句留祸患
指针乱用天地灭 赶紧重写保平安
诚心诚念SICP好 Scheme大法平安保
众生都为函数来 现世险恶忘前缘
Scheme弟子说真相 教你编程莫拒绝

早日摆脱面向过程 早日获得新生

上网搜“九评丹尼斯·里奇” 有真相
-----------------------------------------

“没错字，可以放心了。”

[0] Haskell利用Monad为IO建模，这种IO方式过于曲里拐弯，以致于新手想写一个HelloWorld得先了解一堆玩意。现在的Haskell社区很喜欢范畴论,还有就是津津乐道于Haskell经过数学证明的标准库,但是该出错还是会出错。
https://hackage.haskell.org/package/base-4.12.0.0/docs/System-IO-Unsafe.html
[spec] 编译ghc(Haskell的编译器)这项工作实属刁难人，耗时长产热多，Haskell圈里甚至流传着这样的一句话:授人以火，不若授人以GHC(原文是“给他一堆火，可以让他温暖一天，教会他编译ghc，他这辈子不会冻着)
[1]请搜Kleisli Category,全是Monad害的,总之就是个以a -> m b的态射为对象的范畴,也许吧.
[2]曾经Haskell的MonadTransfomer库中出了个异类ListT，它压根不是Monad。

直到入夜，k才回到了他租住的公寓。从管理员那里拿到他的包裹之后，k的心情变好了不少。

“事不宜迟，马上开始车板子”

看着手边几块裸露着电路的Proto Gaia Memory，k露出了孩子般的笑容,这是健康的象征。

"这样一来,就可以把他们都杀光了."

玩梗完毕,开始拼装.

"先接滤波器,再接焊点....好,开始传输地球记忆了." K拍了拍手,记忆体烧录需要不少时间,可以先上上网.k打开了知乎.

"LISP是不是最强大的编程语言? "

!

总有人提这种引战问题,k翻了翻回答,还行,普遍比较冷静.

直到k看到这条回答:
Lisp括号太多,不能赋值,没有数组,只能解释,不能处理算式,效率低下,晦涩抽象,极其混乱,过于数学,屠龙之技,都是些装B的SB在吹捧Lisp.[3]

前几天才看到Racket群的大佬用racket写图像识别[4],这就屠上龙了?

k没忍住,回了他一句:
现代函数式语言解决问题是不依赖于程序员规模的,学不会就滚.

顺手转到水群,其实k也不能说自己的言行就足够理客中,比如之前水群里的一位管理员吐槽一本python书妄议抽象顺便吹了一波scheme抽象能力的时候,k在心里默默点了个赞.

但是,大多数lisp方言[spec]是有赋值的,大多数lisp方言也有封装过的数组,当然lisp可以编译!效率也可以很高的,说lisp过于数学怎么不去和haskell对线?

[spec]Lisp实际上是一个语言家族,原创始人为约翰麦卡锡,但是不同lisp方言之间的区别可能像三叶虫和奇虾的区别一样大(比如pielang和picolisp,几乎是强类型和弱类型的典型代表).这个语言家族相当庞大,可能有上百种方言.主要的二种方言为Scheme[buggle]和Commonlisp.

[buggle]scheme的情况不好说明,它本应该是一种语言,却被实现成了很多种语言.目前scheme爱好者的阵营大致分化为:中古r5rs派,近代r6rs派,现代我说了算派,至于r7rs,几乎人人都骂(误

[buggle]以上说法不可信,scheme阵营当然是铁板一块,怎么会搞分裂主义(

爽了.下楼买瓶煮调饮[5]来喝.

k看了眼桌上,剑齿虎记忆体已经烧录完毕,带下去试试.

站在饮料机前,k皱起了眉头,无他,盖因其内放有煮调饮的"404"列业已告罄.

行为艺术?

k试着买了一瓶,果然,一直是有货的.

他转过头,猛灌一口,看向一边的猫窝.

大概是出于爱屋及乌的心理[6],此地多好养猫.

你们这里古时候是叫乌撒不成?让我挑一只出来做个实验.

这次jc们的效率大大提高,仅20分钟,k被逮捕.

出法院时,k恍惚了片刻

已经早上了?

旁边那只猫乖巧地站着,不时还伸出爪子挠头.但是k没理会向自己卖萌的猫,他在回想刚才老法官对他的劝诫:

"如果你觉得haskell不好，你就努力去给ghc提交commit；如果你觉得ghc编译的binary效率不行不行，你就去挖ghc实现做优化；如果你觉得现在的typechecker不完善，你就应当去学着开扩展写DependentType,写LiquidHaskell还有agda！而不是一味逃避、辱骂、责备,玩一些head []这样的烂梗！记住，你的水平，就是hs社区的水平！你什么样子，haskeller就是什么样子！"[7]

就在这时,k醒了.他不必再为自己的过错忏悔了.

[3]参考了以下这些lisp黑
https://www.zhihu.com/question/352458416/answer/965419042
http://www.ruanyifeng.com/blog/2010/10/why_lisp_is_superior.html 此文下面的一些评论
https://zhidao.baidu.com/question/134787536196983445.html
[4]真事,能在国内用racket工作,强
[5]详见GEB,此饮料有着减负解压之作用,亦在释放栈帧方面尤有成效.但是此处仍然建议多写尾递归.
[6]范畴论{Catgory theory}又叫猫论{Cat theory},大概因为小范畴所构成的范畴是Cat范畴吧.
[7] head []能过ghc的类型检查,但它不对.hs的儿子idris用vector解决了这个问题.

后记.起因

大概在此文面世一个月前,scheme村的一位村民小手一抖,发了张大锤的发言截图,讽刺了一番函数式.

我在场,按一般经验骂fp的人必为fp爱好者,所以顺口问了一句"是反串黑吗?"

然后大锤一个箭步冲出来,直接来了段函数式单口相声:

反串黑是不可能的，函数式语言如此先进，为什么要黑它
2020/2/17 2:52:25
(1) 有些人就是头昏脑胀了，连知乎大V，CSDN公众号，Reddit宣传过的技术都敢质疑
2020/2/17 2:53:25
(2) 如果你硬是要觉得函数式语言解决不了你们提到过的问题，就请拿出证据
2020/2/17 2:54:22
(3) 你们黑函数式编程是为了什么，不就是为了自己能愉快地用JS/Py收智商税吗
2020/2/17 2:55:18
(4) 我以前用Haskell，只用半天就完成了同事三天的工作量，你跟我说它不好用？
2020/2/17 2:56:07
(5) 还是那句话，黑函数式的程序员都不学无术，都不是真的程序员，迟早会被时代淘汰


甚好甚好,我们水群的人看了好几天,后来一位管理转了图到qq空间,又有LMZ大佬在下方怒发正义演讲:

如果你觉得函数式不好，你就努力去给OCaml和ghc提交commit；如果你觉得FP社区不行不行，你就去自己写文档写教程；如果你觉得别人用FP写的代码太难懂，你就应当去写不用骚套路易懂的代码，而不是一味逃避、辱骂、责备。记住，你的水平，就是FP众的水平！你什么样子，FP众就是什么样子！

我当时就感叹,函数式社区人均带阴阳师,只靠段子都有饭吃,自然不必去舔什么带资本家的福报,长此以往,fp社区必胜.

于是我东拼西凑,整了这个活.

后记.haskell

看完整个故事,相信读者印象最深的词就是haskell了,主要原因是我选择了Republic Of Haskell作为k的鬼搞目的地,ROH的初版设定来源于Landoflisp这本漫画书,原作更富反乌托邦气息,且结局发人深省,极具讽刺意味.值得一睹.

笔者现在还不会写hs,但是见的多了(水hs群水多了),对haskell社区文化比较了解.还有不少因不契合剧情没能用上,属实遗憾.

例如

一个monad不过就是个自函子范畴上的幺半群罢了,有什么难的?

（科普帖）自函子说穿了就是把一个范畴映射到自身的函子，自函子范畴说穿了就是从小范畴映射到自身的函子所构成的以自函子为对象以自然变换为态射的范畴，幺半群说穿了就是只有单个对象的范畴，给定了一个幺半群则可构造出一个仅有单个对象的小范畴使其态射由幺半群的元素给出而合成由幺半群的运算给出，而单子说穿了就是自函子范畴上的这样一个幺半群。（这都不理解么亲连这种最基本的概念都不理解还学什么编程！）

别当真,这个梗的妙处一如川菜,一入眼帘便震得人唇舌麻痹,然而,传统川菜不放什么辣的,例如樟茶鸭.如果你碰巧学过犯愁论,仔细品咂一番这句话,你会愕然发现:

它很好,但是不对.(因为编出来就是图好玩的....

这句话只是hs程序员的接头黑话,而非他们的信条.

原文:https://www.ituring.com.cn/book/miniarticle/73709

此梗还有个升级版:Monad are just free-monad monad monad-algebras?这个更强了,以至于无法翻译出原味,看看就好.

All told, a monad in X is just a monoid in the category of endofunctors 
of X, with product × replaced by composition of endofunctors and unit 
set by the identity endofunctor.引用自 Categories for the Working Mathematician - Saunders Mac Lane
链接：https://www.zhihu.com/question/38703435/answer/80162203
https://www.zhihu.com/question/311922305
https://segmentfault.com/blog/root?tag=%E8%8C%83%E7%95%B4%E8%AE%BA
https://segmentfault.com/blog/haskellwinerly
https://zhuanlan.zhihu.com/p/32182423


如果要编类似的梗,还可以编不少:

什么嘛,Concurrency不就是个ListKleisliArrow嘛. http://www.haskellforall.com/2012/09/concurrency-lists-of-kleisli-arrows.html
一个Monad Transformer只不过是一个MND范畴上的arrow罢了,有什么难的?

还是停一停吧,hs确实是一种工业语言,只是和C不太一样.








关于Scheme的个人感受。

2020.1.18

学Scheme大概半年了，在此之前我只学过BASH，一点点awk，可称是真正的从零入门。现在我已经充分体验过它的有趣与恐怖之处了，因此也来说几句公道话。

个人经历
----------------------------------

首先呢，我看了两本圈子里比较著名的译本，那本『N天学会Scheme』太古板了，而且很不好懂(到现在……后面几章还是看不懂)，另一本书挺简明的，可惜例子少了点(后面几章也不懂XD)。
很惭愧，那段时间看的Scheme书，包括The Little Schemer，都被我生吞活剥了。

真正意识到自己键入的表达式干了什么，是看了include-yy@github译的那份Scheme简明介绍，guenchi启动了这个翻译计划，看完之后我大致懂了Scheme的List是个什么东西，以及Scheme中的Object是一种叫指针的东西(悔了，怎么不先学C)。

后来受liyanri@github(网名鸡肤，一位文风沉稳幽默的C程序员，兼修Scheme与范畴论)影响，去读了guile man手册，直到现在。

感受
------------------------------------

Scheme(的各种扩展版方言)已然是是成熟的工业语言(但是Scheme不发糖！好在我们伟大的主祭cthulhu已经发过了)。对于使用过Python,Ruby,Js的人，Scheme有一种粗犷而奇特的风味(没语法，多括号)。使用Python时感觉像坐在烧烤摊上，各种串应有尽有，酒水尽着你喝(合不合口味就难说)。使用Scheme好像坐在河滩边的石块上，面前只一个石头灶，有嘛是嘛，没盐也行。夕阳渐下，万籁俱寂，入夜了，回家吧，早些休息。

我遇到的问题
---------------------------------

但是说实在的，Scheme社区的书(我说的是tspl那种书!)往往不太乐意讲如何将Scheme用于实践、工程中，就是说，没有太多关于防守性编程和特定领域知识的内容。像「Scheme web开发最佳实践」这种书，不存在的。(反过来，C++,Java,Python,js……即使Ruby也比Scheme人缘好啊-_-)另外，也没人提提性能优化这事儿，艹。

见鬼！问题就在这儿了，那些书把Scheme简直是当成一种纯思辨性质的游戏在传授(我也真是把Scheme当游戏在玩，大学就改)，Continuation，Macro，指称语义(Lisp in smallpiece)，Lambda演算这些东西不要钱地往读者面前摆，好像Scheme根本不是一种工业语言似的(但是……我又说但是了，那些书的作者往往精于实践)。

连Haskell都有Real world haskell啊。

另一个问题，Scheme社区鼓励大伙多写纯函数，将大量纯函数和少量副作用组合成最终的可用程序。好倒是挺好，可惜让Scheme背了多年黑锅。现在Scheme几乎与函数式编程挂上钩了，CommonLisp做为Lisp家族两大支柱的另一员也遭受了池鱼之殃。仔细一看，Scheme只是比较早的一种混合范式语言，Commonlisp只是一种主打面向对象的指令式语言。发暴论了：正是这些都市传说导致了这么多年来Lisp系语言用户稀少。(但是那个改名叫Ecmascript/Javascript的Scheme方言却大获成功，真叫人头大。)

又不是没有副作用!要用就用嘛!

搞得现在Haskell崛起了。

争论
------------------------------------

宏到底好不好?这可能是社区中分歧最大的争论了。

特别之处
---------------------------------

一种语言背后隐含的方法论、它所关联的特定领域的知识才是真正的特别之处。Scheme作为一种语言从来都不难，但是Scheme社区特别喜欢把Scheme作为讨论编译原理，Lambda演算，函数式编程，指称语义，元编程,逻辑式编程的工具(但是……我不会，好在不会也可以玩得很开心，社区里的朋友也不会见怪。)，这些奇特的知识领域有一部分可能确实学习者寥寥无几……或者大伙入门的工具箱不太一样。学好C，吃饱饭嘛。

结果
------------------------

Scheme并不高于其他语言,但是它确实博得了一小批人的偏爱，没啥关系，学不学Scheme仍然是一个无标准答案的问题。

但也别搞得好像它是什么古怪宗教的抄本一样，想学总不会缺资料的。

2020 12.18 补

当初想用guile写个web程序，翻翻找找，除了Artanis和自带的http server基本就无了。Artanis作者跑去搞嵌入式scheme实现，直接送给FSF了，自带的http server......当然高阶函数和Sxml是好的，可惜我不太会用。

在guenchi的论坛看到他们在为string-split做优化，最后的结果放到一个基础库里了，这当然很好，可是库是给chez用的，我只有爪机，用着pthread偶尔抽风的guile2.2.4。(libgc在Android平台上有点水土不服......)

写了个扫雷，因为边界条件很多，想写的清晰一些，guile可以通过reader 宏支持中缀，但是很奇怪，在我把一些中缀表达式嵌套进let之后展开的代码开始混杂凌乱，完全不得其法，又没能力改动，现在更新2.2.6，希望问题已经解决了。


后来有人和我说如果我不会自己改实现，就不要将scheme当成工业语言，我想了想，去看racket去了，不过racket的生态红利我还是没吃到，raco安装一个包总是停不下来，应该是墙太高我太矮了。


至于几乎每个schemer都会的编译原理，现在还是不会, 大概以后也未必会。

哈哈，还是烂人一个。我没有变，scheme也没有变，时代变了。

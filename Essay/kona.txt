K --APL+Lisp (还有个叫Q的sister lang......)

真是个怪语言，我用的实现是kona

1是true，0是false

dyadic -> 2个参数

monadic -> 1个参数

怎么会这样......还以为是个Purely Functional的语言......

~    

逻辑非

-    

Negate(- n) 或者 Minus(m - n) 

换言之它既可monadic又可dyamic

有Symbol类型，使用前置斜引号标注

例如

`foo

整数，字符，symbol，浮点数，这是k的四大原子类型

有list类型

"axw eql"

这是一个七字符的list

1 3 4 5 6

这是一个五整数的list，中间空格多加几个没关系。


list也可使用;和()显式标注

nil代表空,无其他值

;; 表示nil

(;;) 表示保存了一个nil的list


生活在List/Vector上

3 4 5 + 2 0 9

得到

5 4 14

执行

10 + 6 3 2 9

得到

16 13 12 19


只有list长度相同才可以相加

如果list的元素是list或atom，+会递归地处理

-(此处指Negative)也可以递归地处理list

| 

逻辑或

&

逻辑与

%

除法(Divide)

% x 等价于 1 % x

|&对于非01的数就是max,min

_

Floor,小于等于x的最大整数

,

Join，很特殊的append操作

2, 3, 4, 5

得到

2 3 4 5

"abc" , "d"
"abcd"

`foo , `bar
`foo `bar

还表示Enlist，创建单元素列表

(, ,0) , 0
(,0
 0)

确保自己能分清中间的层次关系。

用:进行变量绑定

  foo: 0
  foo: 1
  foo
1

取决于是否改变foo的值，它同样是常量

索引使用[]，从0开始

list可变，允许C风格的赋值





foo: 0 1 0









